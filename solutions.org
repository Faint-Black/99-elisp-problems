* Table of contents
- Working with lists
  - [[#problem-01][01 - Find the last box of a list]]
  - [[#problem-02][02 - Find the last, but one, box of a list]]
  - [[#problem-03][03 - Find the k'th element of a list]]
  - [[#problem-04][04 - Find the number of elements on a list]]
  - [[#problem-05][05 - Reverse a list]]
  - [[#problem-06][06 - Palindrome checker]]
  - [[#problem-07][07 - Flatten a nested list structure]]
  - [[#problem-08][08 - Eliminate consecutive duplicate elements]]
  - [[#problem-09][09 - Pack consecutive duplicates into sublists]]
  - [[#problem-10][10 - Create the run-length encoding of a packed list]]
  - [[#problem-11][11 - Create a modified version of the previous run-length encoding]]
  - [[#problem-12][12 - Decode a run-length encoding]]
  - [[#problem-13][13 - Make a direct solution version of problem eleven]]
  - [[#problem-14][14 - Duplicate the elements of a list]]
  - [[#problem-15][15 - Replicate the elements of a list N amount of times]]
  - [[#problem-16][16 - Drop every Nth element]]
  - [[#problem-17][17 - Split a list into two]]
  - [[#problem-18][18 - Extract a slice from a list]]
  - [[#problem-19][19 - Rotate a list N places to the left]]
  - [[#problem-20][20 - Remove the Kth element from a list]]
  - [[#problem-21][21 - Insert element at position]]
  - [[#problem-22][22 - Create an integer range list]]
  - [[#problem-23][23 - Extract randomly selected elements from a list]]
  - [[#problem-24][24 - Create a lottery numbers generator]]
  - [[#problem-25][25 - Generate a random permutation of a list]]

-----

* 99 Lisp problems
https://www.ic.unicamp.br/~meidanis/courses/mc336/problemas-lisp/L-99_Ninety-Nine_Lisp_Problems.html

Focus on recursion and try to only use the most basic builtin functions to solve the given problems. As the problems become more complex you can allow yourself to use more builtins.

After you understand the basics of this language's recursion style (in my case after problem 15), you may use any language builtin to achieve the desired solution to a problem.

** problem-01
Find the last box of a list.

*Example:* (fn '(A B C D)) -> (D)
#+NAME: problem-01
#+BEGIN_SRC emacs-lisp :results raw
(defun my-last(LIST)
  "Returns the last box of a list"
  (if (cdr LIST) (if (cdr (cdr LIST)) (my-last (cdr LIST)) (cdr LIST)) LIST))

;; Test evaluations
(format "%s\n%s\n%s\n%s\n%s\n%s\n"
        (my-last '(A B C D))
        (my-last '(A))
        (my-last '(A B))
        (my-last '(A B C))
        (my-last '(A B (C D)))
        (my-last '(A B (C (D E)) F)))
#+END_SRC

#+RESULTS: problem-01
(D)
(A)
(B)
(C)
((C D))
(F)

** problem-02
Find the last, but one, box of a list.

*Example:* (fn '(A B C D)) -> (C D)
#+NAME: problem-02
#+BEGIN_SRC emacs-lisp :results raw
(defun my-last-but-one(LIST)
  "Returns the last but one box of a list"
  (if (>= (length (cdr LIST)) 2) (my-last-but-one (cdr LIST)) LIST))

;; Test evaluations
(format "%s\n%s\n%s\n%s\n%s\n%s\n"
        (my-last-but-one '(A B C D))
        (my-last-but-one '(A))
        (my-last-but-one '(A B))
        (my-last-but-one '(A B C))
        (my-last-but-one '(A B (C D)))
        (my-last-but-one '(A B (C (D E)) F)))
#+END_SRC

#+RESULTS: problem-02
(C D)
(A)
(A B)
(B C)
(B (C D))
((C (D E)) F)

** problem-03
Find the K'th element of a list (1 based index).

*Example:* (fn '(A B C D) 3) -> C
#+NAME: problem-03
#+BEGIN_SRC emacs-lisp :results raw
(defun my-nth-element(LIST N)
  "Returns the nth element of a list"
  (if (<= N 1) (car LIST) (my-nth-element (cdr LIST) (- N 1))))

;; Test evaluations
(format "%s\n%s\n%s\n%s\n%s\n%s\n"
        (my-nth-element '(A B C D) 3)
        (my-nth-element '(A) 1)
        (my-nth-element '(A B) 1)
        (my-nth-element '(A B C) 2)
        (my-nth-element '(A B (C D)) 3)
        (my-nth-element '(A B (C (D E)) F) 3))
#+END_SRC

#+RESULTS: problem-03
C
A
A
B
(C D)
(C (D E))

** problem-04
Find the numbers of elements on a list.

*Example:* (fn '(A B C D)) -> 4
#+NAME: problem-04
#+BEGIN_SRC emacs-lisp :results raw
(defun my-num-of-elements(LIST)
  "Returns the number of elements on a list"
  (if (cdr LIST) (+ (my-num-of-elements (cdr LIST)) 1) 1))

;; Test evaluations
(format "%s\n%s\n%s\n%s\n%s\n%s\n"
        (my-num-of-elements '(A B C D))
        (my-num-of-elements '(A))
        (my-num-of-elements '(A B))
        (my-num-of-elements '(A B C))
        (my-num-of-elements '(A B (C D)))
        (my-num-of-elements '(A B (C (D E)) F)))
#+END_SRC

#+RESULTS: problem-04
4
1
2
3
3
4

** problem-05
Reverse a list.

*Example:* (fn '(A B C D)) -> (D C B A)
#+NAME: problem-05
#+BEGIN_SRC emacs-lisp :results raw
(defun my-reverse-list(LIST)
  "Reverses a list"
  (if (cdr LIST) (append (last LIST) (my-reverse-list (butlast LIST))) LIST))

;; Test evaluations
(format "%s\n%s\n%s\n%s\n%s\n%s\n"
        (my-reverse-list '(A B C D))
        (my-reverse-list '(A))
        (my-reverse-list '(A B))
        (my-reverse-list '(A B C))
        (my-reverse-list '(A B (C D)))
        (my-reverse-list '(A B (C (D E)) F)))
#+END_SRC

#+RESULTS: problem-05
(D C B A)
(A)
(B A)
(C B A)
((C D) B A)
(F (C (D E)) B A)

** problem-06
Find out whether a list is a palindrome.

*Example:* (fn '(x a n a x)) -> t
#+NAME: problem-06
#+BEGIN_SRC emacs-lisp :results raw
(defun my-is-palindrome(LIST)
  "Check if the list is a palindrome"
  (cond
   ((find '32 LIST) (my-is-palindrome (remove '32 LIST))) ;; Exclude spacebar chars
   ((<= (length LIST) 1) t)
   ((eql (first LIST) (car (last LIST))) (my-is-palindrome (subseq LIST 1 (- (length LIST) 1))))))

;; Test evaluations
(format "%s\n%s\n%s\n%s\n%s\n%s\n"
        (my-is-palindrome '(x a n a x))
        (my-is-palindrome '(A))
        (my-is-palindrome '(a b c))
        (my-is-palindrome '(o v o))
        (my-is-palindrome (coerce "racecar" 'list))
        (my-is-palindrome (coerce "dennis and edna sinned" 'list)))
#+END_SRC

#+RESULTS: problem-06
t
t
nil
t
t
t

** problem-07
Flatten a nested list structure.

*Example:* (fn '(A (B C (D) E))) -> (A B C D E)
#+NAME: problem-07
#+BEGIN_SRC emacs-lisp :results raw
(defun my-flatten-nest(LIST)
  "Flatten a nested list structure"
  (cond
   ;; () -> ()
   ((null LIST) nil)
   ;; a -> 'a
   ((atom LIST) (list LIST))
   ;; ((a b) ...) -> fn'(a b) ++ fn(...)
   ((listp (car LIST)) (append (my-flatten-nest (car LIST)) (my-flatten-nest (cdr LIST))))
   ;; (a ...) -> 'a ++ fn(...)
   (t (append (list (car LIST)) (my-flatten-nest (cdr LIST))))))

;; Test evaluations
(format "%s\n%s\n%s\n%s\n%s\n%s\n"
        (my-flatten-nest '(A (B C (D) E)))
        (my-flatten-nest '(A))
        (my-flatten-nest '(A B))
        (my-flatten-nest '(A B C))
        (my-flatten-nest '(A B (C D)))
        (my-flatten-nest '(A B (C (D E)) F)))
#+END_SRC

#+RESULTS: problem-07
(A B C D E)
(A)
(A B)
(A B C)
(A B C D)
(A B C D E F)

** problem-08
Eliminate consecutive duplicate elements.

*Example:* (fn '(A A A B B C D D E E E E)) -> (A B C D E)
#+NAME: problem-08
#+BEGIN_SRC emacs-lisp :results raw
(defun my-compress(LIST)
  "Eliminate consecutive duplicate elements"
  (cond
   ;; fn() = ()
   ((null LIST) nil)
   ;; fn'(a) = '(a)
   ((null (cdr LIST)) LIST)
   ;; fn'(a a ...) = fn(a ...)
   ((equal (car LIST) (car (cdr LIST))) (my-compress (cdr LIST)))
   ;; fn'(a b ...) = '(a) ++ fn(b ...)
   (t (append (list (car LIST)) (my-compress (cdr LIST))))))

;; Test evaluations
(format "%s\n%s\n%s\n%s\n%s\n%s\n"
        (my-compress '(A A A B B C D D E E E E))
        (my-compress '(A A))
        (my-compress '(A B))
        (my-compress '(A B B C))
        (my-compress '(A B (C D) E F))
        (my-compress '(A B (C D) (C D) (E F))))
#+END_SRC

#+RESULTS: problem-08
(A B C D E)
(A)
(A B)
(A B C)
(A B (C D) E F)
(A B (C D) (E F))

** problem-09
Pack consecutive duplicates into sublists.

*Example:* (fn '(A A A B B C D D E E E E)) -> ((A A A) (B B) (C) (D D) (E E E E))
#+NAME: problem-09
#+BEGIN_SRC emacs-lisp :results raw
;; helper function
;; fn'()      = 0
;; fn'(a b c) = 1
;; fn'(a a c) = 2
;; fn'(a a a) = 3
(defun my-helper-count-consecutives(LIST)
  "Counts the amount of consecutive copies of the first element"
  (cond
   ((null LIST) 0)
   ((equal (nth 0 LIST) (nth 1 LIST)) (+ (my-helper-count-consecutives (cdr LIST)) 1))
   (t 1)))

(defun my-packed(LIST)
  "Packs consecutive duplicates into sublists"
  (cond
   ;; fn'() = ()
   ((null LIST) nil)
   ;; fn'(a a a b ...) = '((a a a)) ++ fn'(b ...)
   (t (append (list (subseq LIST 0 (my-helper-count-consecutives LIST)))
              (my-packed (subseq LIST (my-helper-count-consecutives LIST)))))))

;; Test evaluations
(format "%s\n%s\n%s\n%s\n%s\n%s\n"
        (my-packed '(A A A B B C D D E E E E))
        (my-packed '(A))
        (my-packed '(A B))
        (my-packed '(A B B C))
        (my-packed '(A B (C D) E F))
        (my-packed '(A B (C D) (C D) (E F))))
#+END_SRC

#+RESULTS: problem-09
((A A A) (B B) (C) (D D) (E E E E))
((A))
((A) (B))
((A) (B B) (C))
((A) (B) ((C D)) (E) (F))
((A) (B) ((C D) (C D)) ((E F)))

** problem-10
Use the result of problem P09 to implement the so-called run-length encoding data compression method. Consecutive duplicates of elements are encoded as lists (N E) where N is the number of duplicates of the element E.

*Example:* (fn '((A A A) (B B) (C) (D D) (E E E E))) -> ((3 A) (2 B) (1 C) (2 D) (4 E))
#+NAME: problem-10
#+BEGIN_SRC emacs-lisp :results raw
;; helper function
;; fn'()      = 0
;; fn'(a b c) = 1
;; fn'(a a c) = 2
;; fn'(a a a) = 3
(defun my-helper-count-consecutives(LIST)
  "Counts the amount of consecutive copies of the first element"
  (cond
   ((null LIST) 0)
   ((equal (nth 0 LIST) (nth 1 LIST)) (+ (my-helper-count-consecutives (cdr LIST)) 1))
   (t 1)))

(defun my-packed(LIST)
  "Packs consecutive duplicates into sublists"
  (cond
   ;; fn'() = ()
   ((null LIST) nil)
   ;; fn'(a a a b ...) = '((a a a)) ++ fn'(b ...)
   (t (append (list (subseq LIST 0 (my-helper-count-consecutives LIST)))
              (my-packed (subseq LIST (my-helper-count-consecutives LIST)))))))

(defun my-length-encode(PACKED)
  "Performs run-length encoding of a list"
  (if PACKED (append (list (append (list (length (car PACKED)))
                                   (list (car (car PACKED)))))
                     (my-length-encode (cdr PACKED)))))

;; Test evaluations
(format "%s\n%s\n%s\n%s\n%s\n%s\n"
        (my-length-encode (my-packed '(A A A B B C D D E E E E)))
        (my-length-encode (my-packed '(A)))
        (my-length-encode (my-packed '(A B)))
        (my-length-encode (my-packed '(A B B C)))
        (my-length-encode (my-packed '(A B (C D) E F)))
        (my-length-encode (my-packed '(A B (C D) (C D) (E F)))))
#+END_SRC

#+RESULTS: problem-10
((3 A) (2 B) (1 C) (2 D) (4 E))
((1 A))
((1 A) (1 B))
((1 A) (2 B) (1 C))
((1 A) (1 B) (1 (C D)) (1 E) (1 F))
((1 A) (1 B) (2 (C D)) (1 (E F)))

** problem-11
Modify the result of problem P10 in such a way that if an element has no duplicates it is simply copied into the result list. Only elements with duplicates are transferred as (N E) lists.

*Example:* (fn '((A A A) (B B) (C) (D D) (E))) -> ((3 A) (2 B) C (2 D) E)
#+NAME: problem-11
#+BEGIN_SRC emacs-lisp :results raw
;; helper function
;; fn'()      = 0
;; fn'(a b c) = 1
;; fn'(a a c) = 2
;; fn'(a a a) = 3
(defun my-helper-count-consecutives(LIST)
  "Counts the amount of consecutive copies of the first element"
  (cond
   ((null LIST) 0)
   ((equal (nth 0 LIST) (nth 1 LIST)) (+ (my-helper-count-consecutives (cdr LIST)) 1))
   (t 1)))

(defun my-packed(LIST)
  "Packs consecutive duplicates into sublists"
  (cond
   ;; fn'() = ()
   ((null LIST) nil)
   ;; fn'(a a a b ...) = '((a a a)) ++ fn'(b ...)
   (t (append (list (subseq LIST 0 (my-helper-count-consecutives LIST)))
              (my-packed (subseq LIST (my-helper-count-consecutives LIST)))))))

(defun my-modified-length-encode(PACKED)
  "Performs a modified version of the run-length encoding of a list"
  (cond
   ;; fn'() = ()
   ((null PACKED) nil)
   ;; fn'((a) ...) = 'a ++ fn'(...)
   ((= (length (car PACKED)) 1) (append (car PACKED)
                                        (my-modified-length-encode (cdr PACKED))))
   ;; fn'((a a) ...) = '(a a) ++ fn'(...)
   (t (append (list (append (list (length (car PACKED)))
                            (list (car (car PACKED)))))
              (my-modified-length-encode (cdr PACKED))))))

;; Test evaluations
(format "%s\n%s\n%s\n%s\n%s\n%s\n"
        (my-modified-length-encode (my-packed '(A A A B B C D D E)))
        (my-modified-length-encode (my-packed '(A)))
        (my-modified-length-encode (my-packed '(A B)))
        (my-modified-length-encode (my-packed '(A B B C)))
        (my-modified-length-encode (my-packed '(A B (C D) E F)))
        (my-modified-length-encode (my-packed '(A B (C D) (C D) (E F)))))
#+END_SRC

#+RESULTS: problem-11
((3 A) (2 B) C (2 D) E)
(A)
(A B)
(A (2 B) C)
(A B (C D) E F)
(A B (2 (C D)) (E F))

** problem-12
Given a run-length code list generated as specified in problem _P10_, construct its uncompressed version.

*Addendum:* the original question requests for decoding of the P11 version of the encoder, but i found that scheme ambiguous to decode. For example, you can't decode "(3 A)" because you don't know if the original packed entry was "((3 A))" or "((A A A))".

*Example:* (fn '((3 A) (2 B) (1 C) (2 D) (1 E))) -> (A A A B B C D D E)
#+NAME: problem-12
#+BEGIN_SRC emacs-lisp :results raw
;; helper function
;; fn'()      = 0
;; fn'(a b c) = 1
;; fn'(a a c) = 2
;; fn'(a a a) = 3
(defun my-helper-count-consecutives(LIST)
  "Counts the amount of consecutive copies of the first element"
  (cond
   ((null LIST) 0)
   ((equal (nth 0 LIST) (nth 1 LIST)) (+ (my-helper-count-consecutives (cdr LIST)) 1))
   (t 1)))

;; helper function
;; fn 3 '(a b c) = ((a b c) (a b c) (a b c))
(defun my-helper-duplicate-n(N LIST)
  "Creates a new list with N copies of LIST"
  (cond
   ((<= N 0) nil)
   ((null LIST) nil)
   (t (append (list LIST) (my-helper-duplicate-n (- N 1) LIST)))))

(defun my-packed(LIST)
  "Packs consecutive duplicates into sublists"
  (cond
   ;; fn'() = ()
   ((null LIST) nil)
   ;; fn'(a a a b ...) = '((a a a)) ++ fn'(b ...)
   (t (append (list (subseq LIST 0 (my-helper-count-consecutives LIST)))
              (my-packed (subseq LIST (my-helper-count-consecutives LIST)))))))

(defun my-length-encode(PACKED)
  "Performs run-length encoding of a list"
  (if PACKED (append (list (append (list (length (car PACKED)))
                                   (list (car (car PACKED)))))
                     (my-length-encode (cdr PACKED)))))

(defun my-length-decode(ENCODED)
  "Decodes the original list compressed by the my-modified-length-encode function"
  (cond
   ;; fn'() = ()
   ((null ENCODED) nil)
   ;; fn'((3 a) ...) '(a a a) ++ fn'(...)
   (t (append (my-helper-duplicate-n (car (car ENCODED)) (car (cdr (car ENCODED))))
              (my-length-decode (cdr ENCODED))))))

;; Test evaluations
(format "%s\n%s\n%s\n%s\n%s\n%s\n"
        (my-length-decode '((3 A) (2 B) (1 C) (2 D) (4 E)))
        (my-length-decode '((1 A)))
        (my-length-decode '((1 A) (1 B)))
        (my-length-decode '((1 A) (2 B) (1 C)))
        (my-length-decode '((1 A) (1 B) (1 (C D)) (1 E) (1 F)))
        (my-length-decode '((1 A) (1 B) (2 (C D)) (1 (E F)))))
#+END_SRC

#+RESULTS: problem-12
(A A A B B C D D E E E E)
(A)
(A B)
(A B B C)
(A B (C D) E F)
(A B (C D) (C D) (E F))

** problem-13
Implement the so-called run-length encoding data compression method directly. I.e. don't explicitly create the sublists containing the duplicates, as in problem P09, but only count them. As in problem P11, simplify the result list by replacing the singleton lists (1 X) by X.

*Addendum:* i do not care for this question, at all.

#+NAME: problem-13
#+BEGIN_SRC emacs-lisp :results raw
(format "%s" "Huh?")
#+END_SRC

#+RESULTS: problem-13
Huh?

** problem-14
Duplicate the elements of a list.

*Example:* (fn '(A B C C D)) -> (A A B B C C C C D D)
#+NAME: problem-14
#+BEGIN_SRC emacs-lisp :results raw
(defun my-duplicate(LIST)
  "Duplicate elements of a list"
  (if LIST (append (append (list (car LIST)) (list (car LIST)))
                   (my-duplicate (cdr LIST)))))

;; Test evaluations
(format "%s\n%s\n"
        (my-duplicate '(A B C C D))
        (my-duplicate '(A (B C) (C (D)))))
#+END_SRC

#+RESULTS: problem-14
(A A B B C C C C D D)
(A A (B C) (B C) (C (D)) (C (D)))

** problem-15
Replicate the elements of a list a given number of times.

*Example:* (fn 3 '(A B C C D)) -> (A A A B B B C C C C C C D D D)
#+NAME: problem-15
#+BEGIN_SRC emacs-lisp :results raw
;; helper function
;; fn 3 '(a b c) = ((a b c) (a b c) (a b c))
(defun my-helper-duplicate-n(N LIST)
  "Creates a new list with N copies of LIST"
  (cond
   ((<= N 0) nil)
   ((null LIST) nil)
   (t (append (list LIST) (my-helper-duplicate-n (- N 1) LIST)))))

(defun my-replicate(N LIST)
  "Replicate elements of a list N times"
  (cond
   ((<= N 0) nil)
   ((null LIST) nil)
   (t (append (my-helper-duplicate-n N (car LIST)) (my-replicate N (cdr LIST))))))

;; Test evaluations
(format "%s\n%s\n"
        (my-replicate 3 '(A B C C D))
        (my-replicate 4 '(A (B C) (C (D)))))
#+END_SRC

#+RESULTS: problem-15
(A A A B B B C C C C C C D D D)
(A A A A (B C) (B C) (B C) (B C) (C (D)) (C (D)) (C (D)) (C (D)))

** problem-16
Drop every nth element from a list.

*Example:* (fn 3 '(A B C D E F G H I J K)) -> (A B D E G H J K)
#+NAME: problem-16
#+BEGIN_SRC emacs-lisp :results raw
(defun my-drop-every (N LIST)
  "Drops every Nth element from the list"
  (cond
   ((null LIST) nil)
   ((<= N 1) nil)
   ((>= N (length LIST)) LIST)
   (t (append (subseq LIST 0 (- N 1)) (my-drop-every N (subseq LIST N))))))

;; Test evaluations
(format "%s\n%s\n"
        (my-drop-every 3 '(A B C D E F G H I J K))
        (my-drop-every 3 '(1 2 3 4 5 6 7 8 9 10 11)))
#+END_SRC

#+RESULTS: problem-16
(A B D E G H J K)
(1 2 4 5 7 8 10 11)

** problem-17
Split a list into two parts, the lenght of the first part is given.

*Example:* (fn 3 '(A B C D E F G H I J K)) -> ((A B C) (D E F G H I J K))
#+NAME: problem-17
#+BEGIN_SRC emacs-lisp :results raw
(defun my-split (N LIST)
  "Split a list into two"
  (cond
   ((null LIST) nil)
   ((>= N (length LIST)) (list LIST))
   ((<= N 0) (list LIST))
   (t (append (list (subseq LIST 0 N)) (list (subseq LIST N))))))

;; Test evaluations
(format "%s\n%s\n"
        (my-split 3 '(A B C D E F G H I J K))
        (my-split 5 '(1 2 3 4 5 6 7 8 9 10)))
#+END_SRC

#+RESULTS: problem-17
((A B C) (D E F G H I J K))
((1 2 3 4 5) (6 7 8 9 10))

** problem-18
Extract a slice from a list (1 based index)

*Example:* (fn 3 7 '(A B C D E F G H I J K)) -> (C D E F G)
#+NAME: problem-18
#+BEGIN_SRC emacs-lisp :results raw
(defun my-slice-of-list (START END LIST)
  "Extract a slice from a list"
  (subseq LIST (- START 1) END))

;; Test evaluations
(format "%s\n%s\n"
        (my-slice-of-list 3 7 '(A B C D E F G H I J K))
        (my-slice-of-list 5 6 '(1 2 3 4 5 6 7 8 9 10)))
#+END_SRC

#+RESULTS: problem-18
(C D E F G)
(5 6)

** problem-19
Rotate a list N places to the left.

*Example:* (fn 3 '(A B C D E F G H I J K)) -> (I J K A B C D E F G H)

*Example:* (fn -3 '(A B C D E F G H I J K)) -> (D E F G H I J K A B C)
#+NAME: problem-19
#+BEGIN_SRC emacs-lisp :results raw
(defun my-rotate (N LIST)
  "Rotate a list N places to the left"
  (cond
   ((null LIST) nil)
   ((= N 0) LIST)
   ((> N 0) (append (nthcdr (- (length LIST) N) LIST)
                    (subseq LIST 0 (- (length LIST) N))))
   ((< N 0) (append (subseq LIST (* N -1))
                    (subseq LIST 0 (* N -1))))))

;; Test evaluations
(format "%s\n%s\n"
        (my-rotate 3 '(A B C D E F G H I J K))
        (my-rotate -3 '(A B C D E F G H I J K)))
#+END_SRC

#+RESULTS: problem-19
(I J K A B C D E F G H)
(D E F G H I J K A B C)

** problem-20
Remove the kth element of a list (1 based index).

*Example:* (fn 3 '(A B C D E F G H I J K)) -> (A B D E F G H I J K)
#+NAME: problem-20
#+BEGIN_SRC emacs-lisp :results raw
(defun my-remove-at (N LIST)
  "Removes the nth element of the list"
  (append (subseq LIST 0 (- N 1)) (nthcdr N LIST)))

;; Test evaluations
(format "%s\n%s\n"
        (my-remove-at 3 '(A B C D E F G H I J K))
        (my-remove-at 1 '(A B C D E F G H I J K)))
#+END_SRC

#+RESULTS: problem-20
(A B D E F G H I J K)
(B C D E F G H I J K)

** problem-21
Insert an element at a given position on a list.

*Example:* (fn 3 'FOO '(A B C D E)) -> (A B FOO C D E)
#+NAME: problem-21
#+BEGIN_SRC emacs-lisp :results raw
(defun my-insert-at (N ELEM LIST)
  "Inserts element at position N on a list"
  (append (subseq LIST 0 (- N 1)) (list ELEM) (nthcdr (- N 1) LIST)))

;; Test evaluations
(format "%s\n%s\n"
        (my-insert-at 3 'FOO '(A B C D E))
        (my-insert-at 1 'BAR '(A B C D E)))
#+END_SRC

#+RESULTS: problem-21
(A B FOO C D E)
(BAR A B C D E)

** problem-22
Create a list containing all integers within a given range (inclusive on both sides).

*Example:* (fn 3 7) -> (3 4 5 6 7)

*Example:* (fn -2 2) -> (-2 -1 0 1 2)

*Example:* (fn 7 3) -> (7 6 5 4 3)
#+NAME: problem-22
#+BEGIN_SRC emacs-lisp :results raw
(defun my-range (START END)
  "Returns a list representing the inclusive range between two numbers"
  (cond
   ((= START END) (list START))
   ((< START END) (append (list START) (my-range (+ START 1) END)))
   ((> START END) (append (list START) (my-range (- START 1) END)))))

;; Test evaluations
(format "%s\n%s\n%s\n"
        (my-range 3 7)
        (my-range -2 2)
        (my-range 7 3))
#+END_SRC

#+RESULTS: problem-22
(3 4 5 6 7)
(-2 -1 0 1 2)
(7 6 5 4 3)

** problem-23
Extract a given number of randomly selected elements from a list. Bonus points if they are all from different selections.

*Example:* (fn 3 '(A B C D E F G H I J)) -> possibly '(F C J)
#+NAME: problem-23
#+BEGIN_SRC emacs-lisp :results raw
(defun my-helper-remove-at (N LIST)
  "Removes the nth element of a list"
  (append (subseq LIST 0 (- N 1)) (nthcdr N LIST)))

(defun my-rand-select (N LIST)
  "Pick N different random elements from a list and return them"
  (setf *random-state* (make-random-state t))
  (setq *random-index* (random (length LIST)))
  (cond
   ((null LIST) nil)
   ((= N 0) nil)
   ((>= N (length LIST)) LIST)
   (t (append (list (nth *random-index* LIST))
              (my-rand-select (- N 1) (my-helper-remove-at *random-index* LIST))))))

;; Test evaluations
(format "%s\n%s\n%s\n"
        (my-rand-select 3 '(A B C D E F G H I J))
        (my-rand-select 3 '(A B C D E F G H I J))
        (my-rand-select 3 '(A B C D E F G H I J)))
#+END_SRC

#+RESULTS: problem-23
(F A G)
(H J A)
(E A A)

** problem-24
Draw N different random numbers from the set 1..M.

*Example:* (fn 6 100) -> possibly '(32 10 54 2 95 11)
#+NAME: problem-24
#+BEGIN_SRC emacs-lisp :results raw
(defun my-helper-remove-at (N LIST)
  "Removes the nth element of a list"
  (append (subseq LIST 0 (- N 1)) (nthcdr N LIST)))

(defun my-helper-range (START END)
  "Returns a list representing the inclusive range between two numbers"
  (cond
   ((= START END) (list START))
   ((< START END) (append (list START) (my-helper-range (+ START 1) END)))
   ((> START END) (append (list START) (my-helper-range (- START 1) END)))))

(defun my-helper-rand-select (N LIST)
  "Pick N different random elements from a list and return them"
  (setf *random-state* (make-random-state t))
  (setq *random-index* (random (length LIST)))
  (cond
   ((null LIST) nil)
   ((= N 0) nil)
   ((>= N (length LIST)) LIST)
   (t (append (list (nth *random-index* LIST))
              (my-helper-rand-select (- N 1) (my-helper-remove-at *random-index* LIST))))))

(defun my-lottery-generator (N RANGE)
  "Draw N different numbers from the range list"
  (my-helper-rand-select N (my-helper-range 0 RANGE)))

;; Test evaluations
(format "%s\n%s\n%s\n"
        (my-lottery-generator 6 100)
        (my-lottery-generator 6 100)
        (my-lottery-generator 6 100))
#+END_SRC

#+RESULTS: problem-24
(58 76 93 13 91 80)
(30 55 35 11 47 95)
(86 93 61 33 25 84)

** problem-25
Generate a random permutation of the elements of a list.

*Example:* (fn '(A B C D E F)) -> possibly '(B A D C E F)
#+NAME: problem-25
#+BEGIN_SRC emacs-lisp :results raw
(defun my-helper-remove-nth (N LIST)
  "Removes the nth element of a list"
  (append (subseq LIST 0 N) (nthcdr (+ N 1) LIST)))

(defun my-helper-range (START END)
  "Returns a list representing the inclusive range between two numbers"
  (cond
   ((= START END) (list START))
   ((< START END) (append (list START) (my-helper-range (+ START 1) END)))
   ((> START END) (append (list START) (my-helper-range (- START 1) END)))))

(defun my-helper-rand-select (N LIST)
  "Pick N different random elements from a list and return them"
  (setf *random-state* (make-random-state t))
  ;; (random 0) throws an exception
  (cond
   ((<= (length LIST) 0) (setq *random-index* 0))
   (t (setq *random-index* (random (length LIST)))))
  (cond
   ((null LIST) nil)
   ((<= N 0) nil)
   (t (append (list (nth *random-index* LIST))
              (my-helper-rand-select (- N 1) (my-helper-remove-nth *random-index* LIST))))))

(defun my-random-permutation (LIST)
  "Generate a random permutation of the input list"
  (my-helper-rand-select (length LIST) LIST))

;; Test evaluations
(format "%s\n%s\n%s\n"
        (my-random-permutation '(A B C D E F))
        (my-random-permutation '(A B C D E F))
        (my-random-permutation '(A B C D E F)))
#+END_SRC

#+RESULTS: problem-25
(E B F C D A)
(C F E D A B)
(F E D B C A)


